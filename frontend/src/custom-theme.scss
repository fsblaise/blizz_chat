// @use '@angular/material' as mat;
// @use '@angular/material-experimental' as matx;
// @use 'sass:color';
// @use 'sass:map';
// @use 'sass:math';

// // Plus imports for other components in your app.

// /// Estimate a hue using the given previous and next hues.
// @function _estimate-hue($hues, $hue, $prev-hue, $next-hue) {
//   $weight: math.div($next-hue - $hue, $next-hue - $prev-hue) * 100%;
//   @return color.mix(map.get($hues, $prev-hue), map.get($hues, $next-hue), $weight);
// }

// // TODO(mmalerba): Remove this and add correct values for these hues.
// /// The Material Design spec references some neutral hues that are not generated by
// /// https://m3.material.io/theme-builder. For now we use this function to estimate the missing hues
// /// by blending the nearest hues that are generated.
// @function _patch-missing-hues($palette) {
//   $neutral: map.get($palette, neutral);
//   $palette: map.set($palette, neutral, 4, _estimate-hue($neutral, 4, 0, 10));
//   $palette: map.set($palette, neutral, 6, _estimate-hue($neutral, 6, 0, 10));
//   $palette: map.set($palette, neutral, 12, _estimate-hue($neutral, 12, 10, 20));
//   $palette: map.set($palette, neutral, 17, _estimate-hue($neutral, 17, 10, 20));
//   $palette: map.set($palette, neutral, 22, _estimate-hue($neutral, 22, 20, 25));
//   $palette: map.set($palette, neutral, 24, _estimate-hue($neutral, 24, 20, 25));
//   $palette: map.set($palette, neutral, 87, _estimate-hue($neutral, 87, 80, 90));
//   $palette: map.set($palette, neutral, 92, _estimate-hue($neutral, 92, 90, 95));
//   $palette: map.set($palette, neutral, 94, _estimate-hue($neutral, 94, 90, 95));
//   $palette: map.set($palette, neutral, 96, _estimate-hue($neutral, 96, 95, 98));
//   @return $palette;
// }

// /// Adds the error colors to the given palette.
// @function _patch-error-palette($palette) {
//   @return map.merge($palette,
//     (error: (0: rgba(0, 0, 0, 1),
//         10: rgba(65, 0, 4, 1),
//         20: rgba(101, 9, 14, 1),
//         25: rgba(117, 22, 23, 1),
//         30: rgba(133, 34, 33, 1),
//         35: rgba(149, 46, 43, 1),
//         40: rgba(165, 58, 54, 1),
//         50: rgba(197, 82, 76, 1),
//         60: rgba(230, 106, 99, 1),
//         70: rgba(255, 137, 129, 1),
//         80: rgba(255, 179, 173, 1),
//         90: rgba(255, 218, 215, 1),
//         95: rgba(255, 237, 235, 1),
//         98: rgba(255, 248, 247, 1),
//         99: rgba(255, 251, 255, 1),
//         100: rgba(255, 255, 255, 1),
//       ),
//     ));
// }

// @function _apply-patches($palette) {
//   @return _patch-missing-hues(_patch-error-palette($palette));
// }

// // Disable legacy API compatibility, since dev-app is fully migrated to theme inspection API.
// // mat.$theme-legacy-inspection-api-compatibility: false;

// $primary-palette: _apply-patches((0: rgba(0, 0, 0, 1),
//       10: rgba(34, 0, 93, 1),
//       20: rgba(56, 30, 114, 1),
//       25: rgba(67, 43, 126, 1),
//       30: rgba(79, 55, 138, 1),
//       35: rgba(91, 67, 151, 1),
//       40: rgba(103, 80, 164, 1),
//       50: rgba(128, 105, 191, 1),
//       60: rgba(154, 131, 219, 1),
//       70: rgba(182, 157, 247, 1),
//       80: rgba(207, 188, 255, 1),
//       90: rgba(233, 221, 255, 1),
//       95: rgba(246, 238, 255, 1),
//       98: rgba(253, 247, 255, 1),
//       99: rgba(255, 251, 255, 1),
//       100: rgba(255, 255, 255, 1),
//       secondary: (0: rgba(0, 0, 0, 1),
//         10: rgba(30, 25, 43, 1),
//         20: rgba(51, 45, 65, 1),
//         25: rgba(62, 56, 77, 1),
//         30: rgba(74, 68, 89, 1),
//         35: rgba(86, 79, 101, 1),
//         40: rgba(98, 91, 113, 1),
//         50: rgba(123, 115, 139, 1),
//         60: rgba(149, 141, 165, 1),
//         70: rgba(176, 167, 192, 1),
//         80: rgba(204, 194, 220, 1),
//         90: rgba(232, 222, 249, 1),
//         95: rgba(246, 238, 255, 1),
//         98: rgba(253, 247, 255, 1),
//         99: rgba(255, 251, 255, 1),
//         100: rgba(255, 255, 255, 1),
//       ),
//       neutral: (0: rgba(0, 0, 0, 1),
//         10: rgba(28, 27, 28, 1),
//         20: rgba(49, 48, 48, 1),
//         25: rgba(60, 59, 59, 1),
//         30: rgba(72, 70, 70, 1),
//         35: rgba(84, 82, 82, 1),
//         40: rgba(96, 94, 94, 1),
//         50: rgba(121, 118, 118, 1),
//         60: rgba(147, 144, 144, 1),
//         70: rgba(173, 170, 170, 1),
//         80: rgba(201, 198, 197, 1),
//         90: rgba(229, 225, 225, 1),
//         95: rgba(244, 240, 239, 1),
//         98: rgba(253, 248, 248, 1),
//         99: rgba(255, 251, 255, 1),
//         100: rgba(255, 255, 255, 1),
//       ),
//       neutral-variant: (0: rgba(0, 0, 0, 1),
//         10: rgba(28, 27, 28, 1),
//         20: rgba(49, 48, 49, 1),
//         25: rgba(60, 59, 60, 1),
//         30: rgba(72, 70, 71, 1),
//         35: rgba(84, 82, 83, 1),
//         40: rgba(96, 94, 95, 1),
//         50: rgba(121, 118, 119, 1),
//         60: rgba(147, 144, 145, 1),
//         70: rgba(174, 170, 171, 1),
//         80: rgba(201, 197, 198, 1),
//         90: rgba(230, 225, 226, 1),
//         95: rgba(244, 240, 240, 1),
//         98: rgba(253, 248, 249, 1),
//         99: rgba(255, 251, 255, 1),
//         100: rgba(255, 255, 255, 1),
//       ),
//     ));

// // Create a theme with the specified color type and density.
// @function create-theme($type: light, $density: 0) {
//   @return define-theme((
//       color: (
//         theme-type: $type,
//         primary: $primary-palette,
//       ),
//       density: (
//         scale: $density
//       ),
//     ));
// }

// // Define the default (light) theme.
// $light-theme: create-theme($type: light);

// // Create our dark theme.
// $dark-theme: create-theme($type: dark);

// // Include the common styles for Angular Material. We include this here so that you only
// // have to load a single css file for Angular Material in your app.
// // **Be sure that you only ever include this mixin once!**
// @include mat.core();

// // Include the default theme styles.
// html {
//   @include mat.all-component-themes($light-theme);
//   // @include matx.color-variants-back-compat($light-theme);
//   // TODO(mmalerba): Support M3 for experimental components.
//   // @include matx.column-resize-theme($light-theme);
//   // @include matx.popover-edit-theme($light-theme);
// }

// @include mat.typography-hierarchy($light-theme);

// .demo-strong-focus {
//   // Note: we can theme the indicators directly through `strong-focus-indicators` as well.
//   // Use the theme so we have some coverage over the entire API surface.
//   @include mat.strong-focus-indicators();
//   @include mat.strong-focus-indicators-theme($light-theme);
// }

// // Include the alternative theme styles inside of a block with a CSS class. You can make this
// // CSS class whatever you want. In this example, any component inside of an element with
// // `.demo-unicorn-dark-theme` will be affected by this alternate dark theme instead of the
// // default theme.
// .demo-unicorn-dark-theme {
//   // Include the dark theme color styles.
//   @include mat.all-component-colors($dark-theme);
//   // TODO(mmalerba): Support M3 for experimental components.
//   // @include matx.column-resize-color($dark-theme);
//   // @include matx.popover-edit-color($dark-theme);

//   // Include the dark theme colors for focus indicators.
//   &.demo-strong-focus {
//     @include mat.strong-focus-indicators-color($dark-theme);
//   }
// }

// // Create classes for all density scales which are supported by all MDC-based components.
// // The classes are applied conditionally based on the selected density in the dev-app layout
// // component.
// $density-scales: (
//   -1,
//   -2,
//   -3,
//   -4,
//   minimum,
//   maximum
// );

// @each $scale in $density-scales {
//   .demo-density-#{$scale} {
//     $density-theme: create-theme($density: $scale);
//     @include mat.all-component-densities($density-theme);
//   }
// }

// // Enable back-compat CSS for color="..." API & typography hierarchy.
// .demo-color-api-back-compat {
//   @include matx.color-variants-back-compat($light-theme);
//   @include mat.typography-hierarchy($light-theme, $back-compat: true);

//   &.demo-unicorn-dark-theme {
//     @include matx.color-variants-back-compat($dark-theme);
//   }
// }

// // In M3 buttons are smaller than their touch target at zero-density.
// .demo-config-buttons button {
//   margin: 4px;
// }

// // .secondary {

// // }

// // .tertiary {
// //   @include mat.button-color($light-theme, $color-variant: secondary);
// //   @include mat.checkbox-color($light-theme, $color-variant: secondary);
// // }

// .mdc-text-field--outlined {
//   --mdc-outlined-text-field-container-shape: 12px !important;
// }

// .settings .mdc-text-field--outlined {
//   --mdc-outlined-text-field-container-shape: 24px !important;
// }

// #search .mdc-text-field--outlined {
//   --mdc-outlined-text-field-container-shape: 32px !important;
// }

// .mat-button-toggle-group {
//   --mat-standard-button-toggle-height: 38px;
// }

// .mat-drawer-inner-container {
//   display: flex !important;
//   flex-direction: column;
//   align-items: center;
//   gap: 20px;
// }

// .mat-mdc-menu-panel {
//   --mat-menu-container-shape: 12px;
//   --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
//   --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);
//   box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
//   --mat-menu-container-color: var(--md-sys-color-surface);
// }